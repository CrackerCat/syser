
#include "../Code/define.h"
#include "../Code/tstrmem.hpp"
#include "../Code/alt/altmap.hpp"

//
#if 0
	char *yytext = NULL;
	int yyleng = 0;

	void yyrestart(FILE*)
	{
		//???
	}

	int yylex()
	{
		//???
		return 0;
	}
#endif
//
	//static 
	const char *teststr = NULL;

	static const char *strsol = "int main(int argc, char* argv[]);";
	static const char *streol = NULL;

	void yy_set_input(const char *str)
	{
		strsol = str;
		streol = &str[TStrLen(str)];
	}

	int yy_input(char *data, int max_size)
	{
		int size = streol - strsol;
		if (size > max_size)
			size = max_size;
		if (size > 0)
		{
			memcpy(data, strsol, size);
			strsol += size;
		}
		return size;
	}

#undef YY_INPUT
#define YY_INPUT(data, res, max_size) res = yy_input(data, max_size)

#define yyalloc Syser_malloc

	static map<void*, unsigned int> *gpMemMap = nullptr;

	void *Syser_malloc(unsigned int size)
	{
		unsigned char *ptr = new unsigned char[size];
		if (!ptr) return nullptr;
		if (!gpMemMap)
			gpMemMap = new map<void*, unsigned int>;
		gpMemMap->insert(_Tmap_pair<void*, unsigned int>(ptr, size));
		return ptr;		
	}

#define yyfree Syser_free

	void Syser_free(void *ptr)
	{
		map<void*, unsigned int>::IT it = gpMemMap->find(ptr);
		if (it != gpMemMap->end())
		{
			gpMemMap->erase(it);
			delete []ptr;
			if (gpMemMap->size() == 0)
			{
				delete gpMemMap;
				gpMemMap = nullptr;
			}
		}
	}

#define yyrealloc Syser_realloc

	void *Syser_realloc(void *ptr, unsigned int size)
	{
		map<void*, unsigned int>::IT it = gpMemMap->find(ptr);
		if (it != gpMemMap->end())
		{
			if (it->second >= size)
				return ptr;
			void *p = Syser_malloc(size);
			memcpy(p, ptr, it->second);
			Syser_free(ptr);
			return p;
		}
		return nullptr;
	}
//

#include <stdlib.h>
//#include <unistd.h>
#include <stdio.h>

#define yyconst const

typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart(FILE *input_file);

void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer);
void yy_load_buffer_state();
YY_BUFFER_STATE yy_create_buffer(FILE *file, int size);
void yy_delete_buffer(YY_BUFFER_STATE b);
void yy_init_buffer(YY_BUFFER_STATE b, FILE *file);
void yy_flush_buffer(YY_BUFFER_STATE b);
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

//YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
//YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
//YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc(yy_size_t);
static void *yy_flex_realloc(void *, yy_size_t);
static void yy_flex_free(void *);
/*
#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)
*/
//typedef unsigned char YY_CHAR;
typedef unsigned long YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state();
static yy_state_type yy_try_NUL_trans(yy_state_type current_state);
static int yy_get_next_buffer();

#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_END_OF_BUFFER 201
static yyconst flex_int16_t yy_accept[812] = 
	{
   0,    0,    0,    0,    0,  201,  199,    1,    3,    2, 
 160,  199,  148,  162,  155,  199,  145,  146,  156,  157, 
 147,  158,  154,  161,  140,  139,  168,  169,  163,  170, 
 164,  167,  138,  138,  152,  153,  165,  138,  138,  138, 
 138,  138,  138,  138,  138,  138,  138,  138,  138,  138, 
 138,  138,  138,  138,  138,  138,  150,  166,  151,  159, 
 200,  200,    1,    3,    0,    2,  182,    0,  144,    0, 
 149,    0,    0,    0,    0,    0,    0,  187,  183,  192, 
   0,    0,  185,  175,  188,  176,  189,  173,  171,    0, 
 142,  196,    0,  186,  142,  140,    0,    0,  140,  140, 
   0,  139,  139,  139,  172,  177,  179,  181,  180,  178, 
 138,    0,    0,  193,  138,  138,  138,  138,  138,  138, 
 138,  138,  138,   65,  138,  138,  138,  138,  138,  138, 
 138,  138,  138,   77,  138,  138,  138,  138,  138,  138, 
 138,  138,  138,  138,  138,  138,  138,  138,  138,  138, 
 138,  138,  138,  138,  138,  138,  138,  138,  138,  138, 
 194,  184,  197,    0,    0,    0,    0,    0,    0,  129, 
   0,    0,    0,    0,    0,    0,  143,    0,    0,  174, 
 195,    0,  142,    0,  198,    0,  142,  140,  141,  139, 
 190,  191,  138,  138,  138,  138,  138,  138,  138,  138, 
 138,  138,  138,  138,  138,  138,  138,  138,  138,  138, 
 138,  138,  138,  138,  138,  138,  138,  138,  138,  138, 
 138,  138,  138,  138,  138,  138,  138,  138,  138,  138, 
  74,  138,  138,  138,   79,  138,  138,  138,  138,   84, 
 138,  138,  138,  138,  138,  138,  138,  138,  138,  138, 
 138,  138,  138,  138,  138,  138,  138,  138,  138,  138, 
 138,  138,  110,  138,  138,  138,  138,  138,  138,  138, 
 138,  138,  138,    0,    0,    0,    0,    0,    0,    0, 
   0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
   0,  142,  141,  141,  138,  138,  138,  138,  138,  138, 
 138,  138,  138,  138,  138,  138,   17,  138,  138,  138, 
 138,  138,  138,  138,  138,  138,  138,  138,  138,  138, 
 138,  138,  138,  138,  138,  138,  138,  138,  138,  138, 
  51,  138,   53,  138,   55,  138,  138,  138,  138,  138, 
 138,  138,  138,  138,  138,   68,   69,  138,  138,  138, 
 138,  138,   76,  138,   80,  138,  138,  138,  138,  138, 
 138,  138,  138,  138,  138,  138,  138,  138,  138,  138, 
 138,  138,  138,  138,  138,  138,  138,  138,  106,  138, 
 138,  109,  138,  138,  138,  138,  117,  138,  119,  138, 
 138,  138,    0,    0,    0,  128,  132,    0,    0,    0, 
   0,    0,    0,  134,    0,    0,    0,    0,    0,  141, 
 138,  138,    6,  138,  138,    9,  138,  138,  138,  138, 
 138,  138,  138,  138,  138,  138,  138,  138,  138,  138, 
 138,   29,  138,  138,  138,   36,  138,  138,  138,  138, 
 138,  138,   44,  138,  138,  138,  138,   50,  138,   52, 
  54,   56,   57,  138,  138,  138,  138,  138,  138,  138, 
 138,  138,  138,   72,   73,  138,  138,  138,   82,  138, 
 138,  138,  138,  138,  138,  138,  138,  138,  138,  138, 
 138,  138,  138,   98,  138,  138,  138,  138,  138,  138, 
 138,  108,  138,  138,  138,  114,  138,  116,  138,  138, 
 138,  123,    0,  135,  125,  133,    0,    0,    0,    0, 
 127,  131,  138,  138,  138,  138,  138,  138,  138,  138, 
 138,  138,  138,  138,   18,  138,  138,  138,  138,  138, 
 138,  138,   23,  138,  138,   30,  138,   34,   35,  138, 
 138,  138,  138,  138,  138,  138,  138,  138,  138,  138, 
 138,  138,  138,  138,   61,  138,  138,  138,   66,  138, 
 138,   71,   75,   78,  138,  138,  138,  138,  138,  138, 
 138,  138,  138,  138,   93,  138,  138,   96,  138,   99, 
 100,  101,  103,  104,  138,  107,  138,  112,  138,  138, 
 138,  138,  138,  124,  136,  126,    0,  137,  138,  138, 
 138,    8,   10,  138,  138,   13,  138,  138,  138,  138, 
 138,  138,  138,  138,   24,   25,   26,  138,   28,   31, 
  32,  138,  138,   38,  138,  138,  138,   42,  138,  138, 
 138,   48,  138,  138,  138,  138,   60,  138,  138,  138, 
 138,  138,   81,  138,  138,  138,   87,  138,  138,   90, 
 138,  138,  138,  138,  138,  138,  138,  111,  138,  138, 
 118,  138,  122,  130,  138,  138,    7,  138,  138,   14, 
 138,  138,  138,  138,  138,  138,   22,  138,  138,  138, 
  39,  138,  138,  138,   46,   47,  138,  138,  138,   59, 
 138,  138,  138,  138,   70,  138,   85,   86,   88,   89, 
  91,  138,   94,  138,  138,  138,  105,  113,  115,  120, 
 138,    5,  138,  138,  138,   45,  138,  138,  138,  138, 
 138,  138,  138,  138,   41,  138,  138,  121,  138,  138, 
  63,   64,  138,   83,   92,  138,   97,  138,    4,   11, 
  12,   15,  138,  138,  138,  138,  138,  138,   37,  138, 
  43,  138,   58,   62,  138,  138,  138,  138,  138,   20, 
 138,   27,  138,  138,  138,  138,  138,  102,  138,   19, 
 138,  138,  138,  138,   67,  138,   16,  138,  138,  138, 
 138,  138,  138,  138,  138,  138,  138,   21,  138,  138, 
 138,  138,  138,  138,  138,   95,  138,  138,  138,  138, 
 138,  138,  138,  138,  138,  138,   40,  138,  138,   49, 
  33,    0, 
	};

static yyconst YY_CHAR yy_ec[256] =
	{
   0,    1,    1,    1,    1,    1,    1,    1,    1,    2, 
   3,    4,    5,    6,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
   1,    1,    7,    8,    9,   10,    1,   11,   12,   13, 
  14,   15,   16,   17,   18,   19,   20,   21,   22,   23, 
  24,   25,   26,   27,   28,   27,   29,   30,   31,   32, 
  33,   34,   35,   36,    1,   37,   37,   37,   37,   38, 
  39,   40,   40,   40,   40,   40,   41,   40,   40,   40, 
  40,   40,   40,   40,   40,   42,   40,   40,   43,   40, 
  40,   44,   45,   46,   47,   48,    1,   49,   50,   51, 
  52,   53,   54,   55,   56,   57,   40,   58,   59,   60, 
  61,   62,   63,   40,   64,   65,   66,   67,   68,   69, 
  70,   71,   72,   73,   74,   75,   76,    1,    1,    1, 
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    1,    1,    1, 
	};

static yyconst YY_CHAR yy_meta[78] =
	{
   0,    1,    1,    2,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    3,    1,    1,    1,    1,    1,    1, 
   4,    1,    5,    5,    5,    5,    5,    5,    5,    5, 
   5,    1,    1,    1,    1,    1,    1,    6,    7,    8, 
   9,   10,    9,    9,    1,    1,    1,    1,    9,    6, 
   6,    6,    6,    7,    8,    9,    9,    9,    9,   10, 
   9,    9,    9,    9,    9,    9,    9,    9,    9,    9, 
   9,    9,    9,    1,    1,    1,    1,    0,
 	};

static yyconst flex_uint16_t yy_base[824] =
	{
   0,    0,    0, 1116, 1115, 1130, 1133,   75, 1133,   81, 
1095,   80,   80, 1094,   79, 1082, 1133, 1133, 1092,   75, 
1133,   76,   77,   96,  128,  179, 1094, 1133,   81, 1090, 
  84, 1133,    0,   85, 1133, 1133, 1089, 1074,   58,   67, 
 106,   75,   82, 1059,   67, 1058, 1052,  111, 1055,   60, 
1064,  119,  126,  113,   78,  111, 1133,  115, 1133, 1133, 
1133, 1095,  208, 1133,  220,  237, 1133,  174, 1133,  238, 
1133, 1062,  132,  174, 1057, 1049,   77, 1133, 1133, 1133, 
 171,  300, 1133, 1133, 1133, 1133, 1133, 1096, 1133, 1091, 
 214, 1133, 1107, 1133,  218,  175,  216,  350,  119,  189, 
   0,    0,  191,  190, 1133, 1075, 1133, 1133, 1133, 1074, 
   0,  241, 1062, 1133,  332, 1044, 1052,  210, 1055, 1054, 
1041,  226, 1042, 1033, 1038, 1033, 1030,  215, 1037, 1033, 
1030, 1036, 1026,    0,  225, 1030, 1024,  134, 1020,  237, 
1035,  233, 1037,  241, 1027, 1023,  238,  233, 1027, 1023, 
 254,  245, 1019,  172, 1024, 1023, 1015,  258, 1022, 1020, 
1133, 1133, 1133,  381,    0, 1022,  264, 1023, 1010,  218, 
1010, 1021, 1010, 1021, 1017, 1011, 1133,  389,    0, 1133, 
1133,  413, 1133, 1064, 1133,  422,  292, 1133,  293, 1133, 
1133, 1133,  282,  281, 1014, 1012,  269,  291, 1013, 1001, 
 304, 1009,  395,  999,  298, 1011,  400,  995,  253,  314, 
 291,  999, 1008, 1003, 1004,  990,  988,  354, 1003,  998, 
 986,  368,  999,  999,  994,  986,  986,  991,  978,  993, 
   0,  988,  978,  982,    0,  983,  988,  983,  982,    0, 
 973,  980,  976,  965,  966,  961,  361,  969,  970,  965, 
 958,  971,  959,  961,  968,  954,  952,  952,  954,  951, 
 369,  962,    0,  961,  951,  955,  950,  958,  943,  956, 
 958,  957,  946,  446,  483,  947,  949,  949,  944,  938, 
 946,  946,  935,  937,  942,  939,  940,  931,  471,  525, 
 453,  485,  387,  369,  926,  933,  396,  924,  918,  934, 
 464,  933,  934,  919,  922,  918,    0,  919,  927,  931, 
 399,  929,  953,  950,  916,  463,  913,  911,  915,  922, 
 909,  917,  905,  896,  910,  908,  905,  899,  936,  905, 
   0,  902,    0,  903,    0,  893,  891,  899,  888,  888, 
 900,  882,  891,  891,  889,    0,    0,  891,  883,  893, 
 879,  883,    0,  882,    0,  892,  889,  875,  880,  872, 
 873,  887,  886,  885,  880,  879,  874,  865,  863,  864, 
 876,  860,  872,  862,  866,  871,  870,  861,    0,  870, 
 849,    0,  504,  856,  861,  860,    0,  847,    0,  847, 
 848,  858,  455,    0,  849, 1133, 1133,  855,  844,  853, 
 853,  841,  837, 1133,  843,  848,  846,  472,    0, 1133, 
 834,  844,    0,  831,  844,    0,  845,  836,  841,  832, 
 839,  825,  841,  838,  830,  826,  466,  829,  543,  817, 
 855,    0,  817,  831,  818,    0,  817,  814,  819,  822, 
 825,  822,  826,  811,  820,  804,  804,    0,  820,    0, 
   0,    0,  820,  806,  807,  812,  813,  800,  799,  808, 
 803,  808,  797,    0,    0,  805,  803,  796,    0,  791, 
 796,  785,  789,  800,  783,  782,  783,  795,  794,  778, 
 790,  781,  775,    0,  788,  785,  787,  771,  780,  786, 
 782,    0,  780,  780,  782,    0,  769,    0,  780,  771, 
 779,    0,  773, 1133, 1133, 1133,  771,  758,  771,  773, 
1133, 1133,  757,  759,  759,  766,  758,  751,  760,  748, 
 750,  761,  752,  757,    0,  743,  738,  745,  745,  777, 
 780,  777,    0,  738,  748,  488,  743,    0,    0,  746, 
 745,  744,  737,  746,  730,  742,  730,  729,  737,  722, 
 724,  736,  719,  719,    0,  735,  721,  720,    0,  730, 
 723,    0,    0,    0,  726,  729,  716,  712,  706,  715, 
 711,  719,  705,  704,    0,  716,  704,    0,  718,    0, 
   0,  718,    0,    0,  699,    0,  710,    0,  703,  709, 
 702,  701,  693, 1133, 1133, 1133,  705, 1133,  708,  694, 
 702,    0,    0,  691,  704,    0,  686,  702,  691,  692, 
 691,  690,  680,  692,    0,    0,    0,  690,    0,    0, 
   0,  680,  678,    0,  689,  687,  680,    0,  689,  679, 
 682,    0,  686,  686,  684,  679,    0,  665,  666,  665, 
 680,  661,    0,  675,  672,  663,    0,  670,  658,    0, 
 650,  667,  655,  655,  656,  665,  662,    0,  661,  661, 
   0,  659,    0, 1133,  660,  656,    0,  656,  642,    0, 
 648,  635,  644,  650,  638,  654,    0,  652,  641,  633, 
   0,  650,  638,  631,    0,    0,  636,  628,  628,    0, 
 639,  625,  624,  638,    0,  635,    0,    0,    0,    0, 
   0,  635,    0,  622,  614,  635,    0,    0,    0,    0, 
 617,    0,  631,  628,  621,    0,  620,  621,  611,  622, 
 622,  619,  598,  610,    0,  600,  603,    0,  571,  582, 
   0,    0,  570,    0,    0,  565,    0,  543,    0,    0, 
   0,    0,  538,  541,  528,  522,  538,  542,    0,  528, 
   0,  531,    0,    0,  522,  520,  519,  523,  519,    0, 
 525,    0,  524,  524,  512,  503,  519,    0,  507,    0, 
 494,  497,  504,  490,    0,  492,    0,  476,  485,  467, 
 477,  480,  449,   43,   51,   99,  135,    0,  236,  272, 
 287,  291,  302,  345,  367,    0,  393,  399,  414,  437, 
 436,  427,  428,  437,  450,  451,    0,  450,  451,    0, 
   0, 1133,  596,  606,  616,  622,  628,  638,  645,  648, 
 652,  656,  660,  666, 
	};

static yyconst flex_int16_t yy_def[824] =
	{
   0,  811,    1,  812,  812,  811,  811,  811,  811,  811, 
 811,  813,  811,  811,  811,  814,  811,  811,  811,  811, 
 811,  811,  811,  811,  811,  811,  811,  811,  811,  811, 
 811,  811,  815,  815,  811,  811,  811,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  811,  811,  811,  811, 
 811,  811,  811,  811,  811,  811,  811,  813,  811,  811, 
 811,  811,  811,  811,  811,  811,  811,  811,  811,  811, 
 814,  811,  811,  811,  811,  811,  811,  811,  811,  811, 
 816,  811,  817,  811,  816,   24,  818,  811,  811,  811, 
 819,   25,  811,  811,  811,  811,  811,  811,  811,  811, 
 815,  813,  814,  811,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 811,  811,  811,  813,  820,  811,  811,  811,  811,  811, 
 811,  811,  811,  811,  811,  811,  811,  814,  821,  811, 
 811,  811,  811,  817,  811,  811,  822,  811,  819,  811, 
 811,  811,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  813,  813,  811,  811,  811,  811,  811, 
 811,  811,  811,  811,  811,  811,  811,  811,  814,  814, 
 811,  823,  811,  811,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  813,  274,  811,  811,  811,  811,  811,  811, 
 811,  811,  811,  811,  811,  811,  811,  814,  289,  811, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  811,  811,  811,  811,  811,  811,  811,  811, 
 811,  811,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  811,  811,  811,  811,  811,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  811,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,  815,  815,  815,  815,  815,  815,  815,  815,  815, 
 815,    0,  811,  811,  811,  811,  811,  811,  811,  811, 
 811,  811,  811,  811, 
	};

static yyconst flex_uint16_t yy_nxt[1212] =
	{
   0,    6,    7,    8,    9,    9,    9,    7,   10,   11, 
  12,   13,   14,   15,   16,   17,   18,   19,   20,   21, 
  22,   23,   24,   25,   25,   25,   25,   25,   25,   25, 
  25,   26,   27,   28,   29,   30,   31,   32,   32,   32, 
  32,   33,   32,   32,   34,    6,   35,   36,   37,   32, 
  38,   39,   40,   41,   42,   43,   32,   44,   32,   45, 
  46,   47,   48,   49,   50,   51,   52,   53,   54,   55, 
  32,   32,   32,   56,   57,   58,   59,   62,   63,   64, 
  64,   64,   62,   64,   63,   65,   65,   65,   64,   68, 
  70,   78,   83,   88,  111,   85,  788,   89,  112,   90, 
  90,   90,   90,   90,   90,   90,   90,   90,  789,   84, 
  86,   87,   91,   79,  105,  106,  117,   92,  108,  109, 
 115,  133,  116,  118,  141,   69,  119,  142,  134,  120, 
  93,  128,   71,   72,  125,  156,  126,   73,  174,   74, 
 157,  129,  175,   75,  130,  127,  131,   76,   94,  160, 
  95,   95,   95,   95,   95,   95,   95,   96,   96,  121, 
 137,  187,  158,  790,  138,  122,   97,  159,  123,   98, 
  99,  100,  144,  139,  153,  145,  146,  124,  154,  149, 
 155,   97,  150,   68,  176,  147,  187,   98,  148,  161, 
 151,  166,  237,  167,  238,   99,  168,  152,  100,   94, 
 791,  101,  101,  101,  101,  101,  101,  101,  101,  101, 
  62,   63,   64,   64,   64,   62,   81,   97,  811,   69, 
 102,  103,   64,   63,   64,   64,   64,   64,  169,  264, 
 187,  189,   97,  189,  170,  171,   94,  265,  102,   64, 
  63,   65,   65,   65,   64,  811,  103,   67,  187,  189, 
  68,   67,  181,  182,   97,  182,  181,  182,  189,  182, 
 163,  163,  163,  163,  163,  163,  163,  181,  182,   97, 
 280,  181,  182,  182,   67,  213,  214,  182,  226,  281, 
 218,  227,  255,   67,  233,  219,   69,   67,   67,  220, 
 245,  234,   67,  253,  240,  246,  248,  256,  249,   67, 
 792,  241,   67,  242,   67,  243,   67,  250,  164,   80, 
 254,  259,  261,   80,  324,  269,  262,  270,  260,  328, 
 325,  276,  177,  177,  177,  177,  177,  177,  177,  277, 
 297,  182,  294,  182,  292,  293,   80,  301,  793,  302, 
 303,  295,  329,  298,  794,   80,  182,  296,  304,   80, 
  80,  182,  292,  305,   80,  316,  308,  795,  309,  796, 
 293,   80,  317,  326,   80,  310,   80,  185,   80,  185, 
 178,  327,  186,  186,  186,  186,  186,  186,  186,  186, 
 186,  192,  193,  194,  195,  196,  197,  198,  199,  200, 
  68,  201,  202,  203,  797,  204,  205,  206,  207,  208, 
 209,  210,  176,  273,  273,  273,  273,  273,  273,  273, 
 409,  288,  288,  288,  288,  288,  288,  288,  312,  336, 
 337,  341,  379,  313,  364,  342,   69,  365,  409,  409, 
 290,  380,  290,  798,   81,  291,  291,  291,  291,  291, 
 291,  291,  291,  291,  186,  186,  186,  186,  186,  186, 
 186,  186,  186,  319,  409,   68,  412,  320,  427,  799, 
 800,  413,  314,  801,   68,  428,  321,  322,  392,  392, 
 392,  392,  392,  392,  392,  291,  291,  291,  291,  291, 
 291,  291,  291,  291,  176,  176,  802,  803,  804,  805, 
 806,   69,   68,  407,  407,  407,  407,  407,  407,  407, 
  69,  807,  808,  809,  810,  393,  393,  393,  393,  393, 
 393,  393,  393,  393,  787,  417,   81,   81,  433,  526, 
 393,  393,  393,  418,  182,  434,  182,  527,   69,  786, 
 785,  784,  393,  393,  393,  393,  393,  393,  176,  182, 
 619,  783,  782,  781,  182,  620,  780,  408,  408,  408, 
 408,  408,  408,  408,  408,  408,  492,  779,  778,  777, 
 776,  493,  408,  408,  408,  494,  529,  775,  530,  774, 
  81,  531,  532,  773,  408,  408,  408,  408,  408,  408, 
 772,  771,  770,  769,  768,  767,  766,  765,  764,  763, 
 762,  761,  760,  759,  758,  757,  533,   60,   60,   60, 
  60,   60,   60,   60,   60,   60,   60,   67,  756,   67, 
  67,   67,   67,   67,   67,   67,   67,   80,  755,  754, 
  80,   80,   80,   80,   80,   80,   80,  110,  110,  110, 
 110,  110,  110,   90,  753,   90,   90,  752,   90,  183, 
 183,  183,  183,  183,  183,  183,  183,  183,  183,   96, 
  96,  751,   96,  188,  188,  188,  188,  274,  274,  274, 
 274,  289,  289,  289,  289,  186,  750,  749,  186,  748, 
 186,  291,  747,  746,  291,  745,  291,  744,  743,  742, 
 741,  740,  739,  738,  737,  736,  735,  734,  733,  732, 
 731,  730,  729,  728,  727,  726,  725,  724,  723,  722, 
 721,  720,  719,  718,  717,  716,  715,  714,  713,  712, 
 711,  710,  709,  708,  707,  706,  705,  704,  703,  702, 
 701,  700,  699,  698,  697,  696,  695,  694,  693,  692, 
 691,  690,  689,  688,  687,  686,  685,  684,  683,  682, 
 681,  680,  679,  678,  677,  676,  675,  674,  673,  672, 
 671,  670,  669,  668,  667,  666,  665,  664,  663,  662, 
 661,  660,  659,  658,  657,  656,  655,  654,  653,  652, 
 651,  650,  649,  648,  647,  646,  645,  644,  643,  642, 
 641,  640,  639,  638,  637,  636,  635,  634,  633,  632, 
 631,  630,  629,  628,  627,  626,  625,  624,  623,  622, 
 621,  618,  617,  616,  615,  614,  613,  612,  611,  610, 
 609,  608,  607,  606,  605,  604,  603,  602,  601,  600, 
 599,  598,  597,  596,  595,  594,  593,  592,  591,  590, 
 589,  588,  587,  586,  585,  584,  583,  582,  581,  580, 
 579,  578,  577,  576,  575,  574,  573,  572,  571,  570, 
 569,  568,  567,  566,  565,  564,  563,  562,  561,  560, 
 559,  558,  557,  556,  555,  554,  553,  552,  551,  550, 
 549,  548,  547,  546,  545,  544,  543,  542,  541,  540, 
 539,  538,  537,  536,  535,  534,  528,  525,  524,  523, 
 522,  521,  520,  519,  518,  517,  516,  515,  514,  513, 
 512,  511,  510,  509,  508,  507,  506,  505,  504,  503, 
 502,  501,  500,  499,  498,  497,  496,  495,  491,  490, 
 489,  488,  487,  486,  485,  484,  483,  482,  481,  480, 
 479,  478,  477,  476,  475,  474,  473,  472,  471,  470, 
 469,  468,  467,  466,  465,  464,  463,  462,  461,  460, 
 459,  458,  457,  456,  455,  454,  453,  452,  451,  450, 
 449,  448,  447,  446,  445,  444,  443,  442,  441,  440, 
 439,  438,  437,  436,  435,  432,  431,  430,  429,  426, 
 425,  424,  423,  422,  421,  420,  419,  416,  415,  414, 
 411,  410,  406,  405,  404,  403,  402,  401,  400,  399, 
 398,  397,  396,  395,  394,  391,  390,  389,  388,  387, 
 386,  385,  384,  383,  382,  381,  378,  377,  376,  375, 
 374,  373,  372,  371,  370,  369,  368,  367,  366,  363, 
 362,  361,  360,  359,  358,  357,  356,  355,  354,  353, 
 352,  351,  350,  349,  348,  347,  346,  345,  344,  343, 
 340,  339,  338,  335,  334,  333,  332,  331,  330,  323, 
 318,  315,  311,  307,  306,  300,  299,  184,  287,  286, 
 285,  284,  283,  282,  279,  278,  275,  272,  271,  268, 
 267,  266,  263,  258,  257,  252,  251,  247,  244,  239, 
 236,  235,  232,  231,  230,  229,  228,  225,  224,  223, 
 222,  221,  217,  216,  215,  212,  211,   81,  191,  190, 
 184,  180,  179,  173,  172,  165,  162,  143,  140,  136, 
 135,  132,  114,  113,  107,  104,   82,   81,   77,   66, 
 811,   61,   61,    5,  811,  811,  811,  811,  811,  811, 
 811,  811,  811,  811,  811,  811,  811,  811,  811,  811, 
 811,  811,  811,  811,  811,  811,  811,  811,  811,  811, 
 811,  811,  811,  811,  811,  811,  811,  811,  811,  811, 
 811,  811,  811,  811,  811,  811,  811,  811,  811,  811, 
 811,  811,  811,  811,  811,  811,  811,  811,  811,  811, 
 811,  811,  811,  811,  811,  811,  811,  811,  811,  811, 
 811,  811,  811,  811,  811,  811,  811,  811,  811,  811, 
   0,    0, 
	};

static yyconst flex_int16_t yy_chk[1210] =
	{
   0,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
   1,    1,    1,    1,    1,    1,    1,    7,    7,    7, 
   7,    7,    7,    9,    9,    9,    9,    9,    9,   11, 
  12,   14,   19,   22,   33,   21,  783,   22,   33,   22, 
  22,   22,   22,   22,   22,   22,   22,   22,  784,   19, 
  21,   21,   23,   14,   28,   28,   39,   23,   30,   30, 
  38,   44,   38,   39,   49,   11,   39,   49,   44,   39, 
  23,   42,   12,   12,   41,   54,   41,   12,   76,   12, 
  54,   42,   76,   12,   42,   41,   42,   12,   24,   57, 
  24,   24,   24,   24,   24,   24,   24,   24,   24,   40, 
  47,   98,   55,  785,   47,   40,   24,   55,   40,   24, 
  24,   24,   51,   47,   53,   51,   51,   40,   53,   52, 
  53,   24,   52,   67,   80,   51,   98,   24,   51,   57, 
  52,   72,  137,   72,  137,   24,   72,   52,   24,   25, 
 786,   25,   25,   25,   25,   25,   25,   25,   25,   25, 
  62,   62,   62,   62,   62,   62,   80,   25,   95,   67, 
  25,   25,   64,   64,   64,   64,   64,   64,   73,  153, 
  99,  103,   25,  102,   73,   73,   96,  153,   25,   65, 
  65,   65,   65,   65,   65,   95,   25,   69,   99,  103, 
 111,   69,   90,   90,   96,   90,   94,   94,  102,   94, 
  69,   69,   69,   69,   69,   69,   69,   90,   90,   96, 
 169,   94,   94,   90,   69,  117,  117,   94,  127,  169, 
 121,  127,  147,   69,  134,  121,  111,   69,   69,  121, 
 141,  134,   69,  146,  139,  141,  143,  147,  143,   69, 
 788,  139,   69,  139,   69,  139,   69,  143,   69,   81, 
 146,  150,  151,   81,  208,  157,  151,  157,  150,  210, 
 208,  166,   81,   81,   81,   81,   81,   81,   81,  166, 
 193,  186,  192,  186,  188,  188,   81,  196,  789,  196, 
 197,  192,  210,  193,  790,   81,  186,  192,  197,   81, 
  81,  186,  188,  197,   81,  204,  200,  791,  200,  792, 
 188,   81,  204,  209,   81,  200,   81,   97,   81,   97, 
  81,  209,   97,   97,   97,   97,   97,   97,   97,   97, 
  97,  114,  114,  114,  114,  114,  114,  114,  114,  114, 
 163,  114,  114,  114,  793,  114,  114,  114,  114,  114, 
 114,  114,  177,  163,  163,  163,  163,  163,  163,  163, 
 293,  177,  177,  177,  177,  177,  177,  177,  202,  217, 
 217,  221,  260,  202,  246,  221,  163,  246,  293,  292, 
 181,  260,  181,  794,  177,  181,  181,  181,  181,  181, 
 181,  181,  181,  181,  185,  185,  185,  185,  185,  185, 
 185,  185,  185,  206,  292,  273,  296,  206,  310,  796, 
 797,  296,  202,  798,  392,  310,  206,  206,  273,  273, 
 273,  273,  273,  273,  273,  290,  290,  290,  290,  290, 
 290,  290,  290,  290,  288,  407,  799,  800,  801,  802, 
 803,  273,  274,  288,  288,  288,  288,  288,  288,  288, 
 392,  804,  805,  807,  808,  274,  274,  274,  274,  274, 
 274,  274,  274,  274,  782,  300,  288,  407,  315,  426, 
 274,  274,  274,  300,  291,  315,  291,  426,  274,  781, 
 780,  779,  274,  274,  274,  274,  274,  274,  289,  291, 
 535,  778,  777,  775,  291,  535,  773,  289,  289,  289, 
 289,  289,  289,  289,  289,  289,  382,  772,  771,  770, 
 768,  382,  289,  289,  289,  382,  428,  766,  428,  765, 
 289,  428,  428,  764,  289,  289,  289,  289,  289,  289, 
 763,  762,  760,  758,  757,  756,  755,  754,  751,  749, 
 747,  746,  745,  744,  743,  742,  428,  812,  812,  812, 
 812,  812,  812,  812,  812,  812,  812,  813,  737,  813, 
 813,  813,  813,  813,  813,  813,  813,  814,  735,  732, 
 814,  814,  814,  814,  814,  814,  814,  815,  815,  815, 
 815,  815,  815,  816,  729,  816,  816,  728,  816,  817, 
 817,  817,  817,  817,  817,  817,  817,  817,  817,  818, 
 818,  726,  818,  819,  819,  819,  819,  820,  820,  820, 
 820,  821,  821,  821,  821,  822,  725,  723,  822,  722, 
 822,  823,  721,  720,  823,  719,  823,  718,  717,  716, 
 714,  713,  712,  710,  705,  704,  703,  701,  695,  693, 
 692,  691,  690,  688,  687,  686,  683,  682,  681,  679, 
 678,  677,  675,  674,  673,  672,  671,  670,  668,  667, 
 665,  664,  661,  659,  658,  656,  655,  654,  653,  652, 
 651,  650,  648,  647,  645,  644,  643,  641,  640,  639, 
 638,  637,  635,  634,  633,  632,  630,  629,  628,  626, 
 625,  624,  622,  621,  617,  613,  612,  611,  610,  609, 
 608,  607,  606,  604,  603,  600,  599,  598,  596,  592, 
 591,  590,  589,  588,  586,  584,  581,  578,  576,  575, 
 573,  572,  571,  570,  569,  568,  567,  566,  565,  564, 
 560,  559,  557,  556,  555,  553,  552,  551,  550,  549, 
 548,  547,  546,  545,  544,  543,  542,  541,  540,  539, 
 536,  534,  533,  531,  530,  529,  528,  527,  526,  525, 
 523,  522,  521,  520,  519,  518,  517,  516,  515,  514, 
 513,  512,  509,  508,  507,  506,  502,  500,  499,  498, 
 496,  494,  493,  492,  490,  489,  488,  487,  486,  485, 
 484,  482,  481,  480,  479,  478,  477,  476,  475,  474, 
 473,  472,  471,  470,  469,  467,  466,  465,  462,  461, 
 460,  459,  458,  457,  456,  455,  454,  453,  452,  448, 
 446,  445,  444,  443,  442,  441,  440,  439,  438,  437, 
 436,  434,  433,  432,  430,  429,  427,  425,  424,  423, 
 422,  421,  420,  419,  418,  417,  416,  414,  413,  411, 
 410,  406,  405,  404,  402,  401,  400,  399,  398,  397, 
 394,  391,  390,  389,  387,  385,  384,  383,  380,  379, 
 377,  376,  375,  374,  373,  372,  371,  370,  369,  368, 
 367,  366,  365,  364,  363,  362,  361,  360,  359,  358, 
 357,  356,  355,  353,  351,  350,  349,  348,  347,  344, 
 343,  342,  341,  340,  339,  338,  337,  336,  335,  333, 
 331,  329,  328,  327,  326,  325,  324,  323,  322,  321, 
 320,  319,  318,  317,  316,  314,  313,  312,  311,  309, 
 308,  307,  305,  304,  303,  302,  301,  299,  298,  297, 
 295,  294,  287,  286,  285,  284,  283,  282,  281,  280, 
 279,  278,  277,  276,  275,  272,  271,  270,  269,  268, 
 267,  266,  265,  264,  263,  261,  259,  258,  257,  256, 
 255,  254,  253,  252,  251,  250,  249,  248,  247,  245, 
 244,  243,  242,  241,  240,  238,  237,  236,  235,  233, 
 232,  231,  229,  228,  227,  226,  225,  224,  223,  222, 
 220,  219,  218,  216,  215,  214,  213,  212,  211,  207, 
 205,  203,  201,  199,  198,  195,  194,  183,  175,  174, 
 173,  172,  171,  170,  168,  167,  165,  159,  158,  156, 
 155,  154,  152,  149,  148,  145,  144,  142,  140,  138, 
 136,  135,  132,  131,  130,  129,  128,  126,  125,  124, 
 123,  122,  120,  119,  118,  116,  115,  112,  109,  105, 
  92,   89,   87,   75,   74,   71,   61,   50,   48,   46, 
  45,   43,   37,   36,   29,   26,   18,   15,   13,   10, 
   5,    4,    3,  811,  811,  811,  811,  811,  811,  811, 
 811,  811,  811,  811,  811,  811,  811,  811,  811,  811, 
 811,  811,  811,  811,  811,  811,  811,  811,  811,  811, 
 811,  811,  811,  811,  811,  811,  811,  811,  811,  811, 
 811,  811,  811,  811,  811,  811,  811,  811,  811,  811, 
 811,  811,  811,  811,  811,  811,  811,  811,  811,  811, 
 811,  811,  811,  811,  811,  811,  811,  811,  811,  811, 
 811,  811,  811,  811,  811,  811,  811,  811,  811,  811, 
	};

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

#define YY_MORE_ADJ 0
char *yytext;

#define INITIAL 0
#define COMMENT 1

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

int yylex()
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

	if ( yy_init )
		{
		yy_init = 0;

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}


	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 812 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1133 );
		//???
yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

			case 1:		// \r\n
                                        //teststr = yytext; return 706+1000;
			case 2:		// \r
                                        //teststr = yytext; return 706+1001;
			case 3:		// \n
                                        teststr = yytext; return 706; //L_NEWLINE	//NEWLINE
			case 4:		// __abstract/deprecated
                                        teststr = yytext; return 512;			//KEYWORD
			case 5:		// e __alignof
                                        teststr = yytext; return 513;
			case 6:		// e __asm
                                        teststr = yytext; return 514; //L_ASM
			case 7:		// e __assume
                                        teststr = yytext; return 515; //L_ASSUME
			case 8:		// e __based
                                        teststr = yytext; return 516; //L_BASED
			case 9:		// __box/deprecated
                                        teststr = yytext; return 517;
			case 10:	// e __cdecl
                                        teststr = yytext; return 518; //L_C
			case 11:	// e __declspec
                                        teststr = yytext; return 519; //L_DECLSPEC
			case 12:	// __delegate/deprecated
                                        teststr = yytext; return 520;
			case 13:	// e __event
                                        teststr = yytext; return 521; //L_EVENT
			case 14:	// e __except
                                        teststr = yytext; return 522; //L_EXCEPT
			case 15:	// e __fastcall
                                        teststr = yytext; return 523; //L_FASTCALL
			case 16:	// e __forceinline
                                        teststr = yytext; return 524; //L_FORCEINLINE
			case 17:	// __gc/deprecated
                                        teststr = yytext; return 525;
			case 18:	// e __hook
                                        teststr = yytext; return 526; //L_HOOK
			case 19:	// __identifier
                                        teststr = yytext; return 527; //L_IDENTIFIER
			case 20:	// e __if_exists
                                        teststr = yytext; return 528; //L_IF_EXISTS
			case 21:	// e __if_not_exists
                                        teststr = yytext; return 529; //L_IF_NOT_EXISTS
			case 22:	// e __inline
                                        teststr = yytext; return 530;
			case 23:	// e __int8
                                        teststr = yytext; return 531; //L_INT8
			case 24:	// e __int16
                                        teststr = yytext; return 532; //L_INT16
			case 25:	// e __int32
                                        teststr = yytext; return 533; //L_INT32
			case 26:	// e __int64
                                        teststr = yytext; return 534; //L_INT64
			case 27:	// e __interface
                                        teststr = yytext; return 535; //L_INTERFACE
			case 28:	// e __leave
                                        teststr = yytext; return 536; //L_LEAVE
			case 29:	// e __m64
                                        teststr = yytext; return 537;
			case 30:	// e __m128
                                        teststr = yytext; return 538;
			case 31:	// e __m128d
                                        teststr = yytext; return 539;
			case 32:	// e __m128i
                                        teststr = yytext; return 540;
			case 33:	// e __multiple_inheritance
                                        teststr = yytext; return 541; //L_MI
			case 34:	// __nogc/deprecated
                                        teststr = yytext; return 542;
			case 35:	// __noop
                                        teststr = yytext; return 543;
			case 36:	// __pin/deprecated!
                                        teststr = yytext; return 544; //L_PIN
			case 37:	// __propertly/deprecated!
                                        teststr = yytext; return 545;
			case 38:	// e __raise
                                        teststr = yytext; return 546; //L_RAISE
			case 39:	// __sealed/deprecated!
                                        teststr = yytext; return 547;
			case 40:	// e __single_inheritance
                                        teststr = yytext; return 548; //L_SI
			case 41:	// e __stdcall
                                        teststr = yytext; return 549; //L_STDCALL
			case 42:	// e __super
                                        teststr = yytext; return 550; //L_SUPER
			case 43:	// __try_cast/deprecated
                                        teststr = yytext; return 551;
			case 44:	// e __try
                                        teststr = yytext; return 552; //L_SEHTRY
			case 45:	// e __finally
                                        teststr = yytext; return 553; //L_FINALLY
			case 46:	// e __unhook
                                        teststr = yytext; return 554; //L_UNHOOK
			case 47:	// e __uuidof
                                        teststr = yytext; return 555; //L_UUIDOF
			case 48:	// __value/deprecated
                                        teststr = yytext; return 556;
			case 49:	// e __virtual_inheritance
                                        teststr = yytext; return 557; //L_VI
			case 50:	// e __w64
                                        teststr = yytext; return 558; //L_W64
			case 51:	// bool
                                        teststr = yytext; return 559; //L_BOOL
			case 52:	// break
                                        teststr = yytext; return 560; //L_BREAK
			case 53:	// case
                                        teststr = yytext; return 561; //L_CASE
			case 54:	// catch
                                        teststr = yytext; return 562; //L_CATCH
			case 55:	// char
                                        teststr = yytext; return 563; //L_CHAR
			case 56:	// class
                                        teststr = yytext; return 564; //L_CLASS
			case 57:	// const
                                        teststr = yytext; return 565; //L_CONST
			case 58:	// const_cast
                                        teststr = yytext; return 566; //L_CONSTCAST
			case 59:	// continue
                                        teststr = yytext; return 567; //L_CONTINUE
			case 60:	// default
                                        teststr = yytext; return 568; //L_DEFAULT
			case 61:	// delete
                                        teststr = yytext; return 569; //L_DELETE
			case 62:	// deprecated/__declspec
                                        teststr = yytext; return 570;
			case 63:	// dllexport/__declspec
                                        teststr = yytext; return 571;
			case 64:	// dllimport/__declspec
                                        teststr = yytext; return 572;
			case 65:	// do
                                        teststr = yytext; return 573; //L_DO
			case 66:	// double
                                        teststr = yytext; return 574; //L_DOUBLE
			case 67:	// dynamic_cast
                                        teststr = yytext; return 575; //L_DYNCAST
			case 68:	// else
                                        teststr = yytext; return 576; //L_ELSE
			case 69:	// enum
                                        teststr = yytext; return 577; //L_ENUM
			case 70:	// explicit
                                        teststr = yytext; return 578; //L_EXPLICIT
			case 71:	// extern
                                        teststr = yytext; return 579; //L_EXTERN
			case 72:	// false
                                        teststr = yytext; return 580; //L_FALSE
			case 73:	// float
                                        teststr = yytext; return 581; //L_FLOAT
			case 74:	// for
                                        teststr = yytext; return 582; //L_FOR
			case 75:	// friend
                                        teststr = yytext; return 583; //L_FRIEND
			case 76:	// goto
                                        teststr = yytext; return 584; //L_GOTO
			case 77:	// if
                                        teststr = yytext; return 585; //L_IF
			case 78:	// inline
                                        teststr = yytext; return 586; //L_INLINE
			case 79:	// int
                                        teststr = yytext; return 587; //L_INT
			case 80:	// long
                                        teststr = yytext; return 588; //L_LONG
			case 81:	// mutable
                                        teststr = yytext; return 589; //L_MUTABLE
			case 82:	// naked/__declspec
                                        teststr = yytext; return 590;
			case 83:	// namespace
                                        teststr = yytext; return 591; //L_NAMESPACE
			case 84:	// new
                                        teststr = yytext; return 592; //L_NEW
			case 85:	// noinline/__declspec
                                        teststr = yytext; return 593;
			case 86:	// noreturn/__declspec
                                        teststr = yytext; return 594;
			case 87:	// nothrow/__declspec
                                        teststr = yytext; return 595; //L_NOTHROW
			case 88:	// novtable/__declspec
                                        teststr = yytext; return 596;
			case 89:	// operator
                                        teststr = yytext; return 597; //L_OPERATOR
			case 90:	// private
                                        teststr = yytext; return 598; //L_PRIVATE
			case 91:	// propetry/__declspec
                                        teststr = yytext; return 599;
			case 92:	// protected
                                        teststr = yytext; return 600; //L_PROTECTED
			case 93:	// public
                                        teststr = yytext; return 601; //L_PUBLIC
			case 94:	// register
                                        teststr = yytext; return 602; //L_REGISTER
			case 95:	// reinterpret_cast
                                        teststr = yytext; return 603; //L_REINCAST
			case 96:	// return
                                        teststr = yytext; return 604; //L_RETURN
			case 97:	// selectany/__declspec
                                        teststr = yytext; return 605;
			case 98:	// short
                                        teststr = yytext; return 606; //L_SHORT
			case 99:	// signed
                                        teststr = yytext; return 607; //L_SIGNED
			case 100:	// sizeof
                                        teststr = yytext; return 608; //L_SIZEOF
			case 101:	// static
                                        teststr = yytext; return 609; //L_STATIC
			case 102:	// static_cast
                                        teststr = yytext; return 610; //L_STATCAST
			case 103:	// struct
                                        teststr = yytext; return 611; //L_STRUCT
			case 104:	// switch
                                        teststr = yytext; return 612; //L_SWITCH
			case 105:	// template
                                        teststr = yytext; return 613; //L_TEMPLATE
			case 106:	// this
                                        teststr = yytext; return 614; //L_THIS
			case 107:	// thread/__declspec
                                        teststr = yytext; return 615;
			case 108:	// throw
                                        teststr = yytext; return 616; //L_THROW
			case 109:	// true
                                        teststr = yytext; return 617; //L_TRUE
			case 110:	// try
                                        teststr = yytext; return 618; //L_CXXTRY
			case 111:	// typedef
                                        teststr = yytext; return 619; //L_TYPEDEF
			case 112:	// typeid
                                        teststr = yytext; return 620; //L_TYPEID
			case 113:	// typename
                                        teststr = yytext; return 621; //L_TYPENAME_KW
			case 114:	// union
                                        teststr = yytext; return 622; //L_UNION
			case 115:	// unsigned
                                        teststr = yytext; return 623; //L_UNSIGNED
			case 116:	// using
                                        teststr = yytext; return 624; //L_USING
			case 117:	// uuid/__declspec
                                        teststr = yytext; return 625;
			case 118:	// virtual
                                        teststr = yytext; return 626; //L_VIRTUAL
			case 119:	// void
                                        teststr = yytext; return 627; //L_VOID
			case 120:	// volatile
                                        teststr = yytext; return 628; //L_VOLATILE
			case 121:	// e __wchar_t
                                        teststr = yytext; return 629; //L_WCHAR_T
			case 122:	// wchar_t
                                        teststr = yytext; return 630;
			case 123:	// while
                                        teststr = yytext; return 631; //L_WHILE		//KEYWORD
			case 124:	// #define
                                        teststr = yytext; return 632; //L_M_DEFINE	//MACRO
			case 125:	// #error
                                        teststr = yytext; return 633; //L_M_ERROR
			case 126:	// #import
                                        teststr = yytext; return 634; //L_M_IMPORT
			case 127:	// #undef
                                        teststr = yytext; return 635; //L_M_UNDEF
			case 128:	// #elif
                                        teststr = yytext; return 636; //L_M_ELIF
			case 129:	// #if
                                        teststr = yytext; return 637; //L_M_IF
			case 130:	// #include
                                        teststr = yytext; return 638; //L_M_INCLUDE
			case 131:	// #using
                                        teststr = yytext; return 639; //L_M_USING
			case 132:	// #else
                                        teststr = yytext; return 640; //L_M_ELSE
			case 133:	// #ifdef
                                        teststr = yytext; return 641; //L_M_IFDEF
			case 134:	// #line
                                        teststr = yytext; return 642; //L_M_LINE
			case 135:	// #endif
                                        teststr = yytext; return 643; //L_M_ENDIF
			case 136:	// #ifndef
                                        teststr = yytext; return 644; //L_M_IFNDEF
			case 137:	// #pragma
                                        teststr = yytext; return 645; //L_M_PRAGMA	//MACRO
			case 138:	// string
                                        teststr = yytext; return 705; //L_STRWORD	//OPERATION
			case 139:	// numbers??? dec include LL
                                        teststr = yytext; return 646; //L_DEC
			case 140:	// numbers??? oct
                                        teststr = yytext; return 647; //L_OCT
			case 141:	// hex??? 0xff
                                        teststr = yytext; return 648; //L_HEX
			case 142:	// float/double ??? 0.0
                                        teststr = yytext; return 649; //L_DBL
			case 143:	// 'string' ??? numbers '113'
                                        teststr = yytext; return 650; //L_SSTR
			case 144:	// "string" L"string"
                                        teststr = yytext; return 651; //L_DSTR
			case 145:	// (
                                        teststr = yytext; return 652; //L_LPAREN
			case 146:	// )
                                        teststr = yytext; return 653; //L_RPAREN
			case 147:	// ,
                                        teststr = yytext; return 654; //L_COMMA
			case 148:	// #
                                        teststr = yytext; return 35; //L_POUND
			case 149:	// ##
                                        teststr = yytext; return 655; //L_POUNDPOUND
			case 150:	// {
                                        teststr = yytext; return 656; //L_LCURLY
			case 151:	// }
                                        teststr = yytext; return 657; //L_RCURLY
			case 152:	// [
                                        teststr = yytext; return 658; //L_LBRACK
			case 153:	// ]
                                        teststr = yytext; return 659; //L_RBRACK
			case 154:	// .
                                        teststr = yytext; return 660; //L_PERIOD
			case 155:	// &
                                        teststr = yytext; return 661; //L_AND
			case 156:	// *
                                        teststr = yytext; return 662; //L_MULT
			case 157:	// +
                                        teststr = yytext; return 663; //L_PLUS
			case 158:	// -
                                        teststr = yytext; return 664; //L_MINUS
			case 159:	// ~
                                        teststr = yytext; return 665; //L_TILDE
			case 160:	// !
                                        teststr = yytext; return 666; //L_EXCLAIM
			case 161:	// /
                                        teststr = yytext; return 667; //L_DIV
			case 162:	// %
                                        teststr = yytext; return 668; //L_MOD
			case 163:	// <
                                        teststr = yytext; return 669; //L_LT
			case 164:	// >
                                        teststr = yytext; return 670; //L_GT
			case 165:	// ^
                                        teststr = yytext; return 671; //L_XOR
			case 166:	// |
                                        teststr = yytext; return 672; //L_OR
			case 167:	// ?
                                        teststr = yytext; return 673; //L_QUEST
			case 168:	// :
                                        teststr = yytext; return 674; //L_COLON
			case 169:	// ;
                                        teststr = yytext; return 675; //L_SEMI
			case 170:	// =
                                        teststr = yytext; return 676; //L_ASSIGN
			case 171:	// .*
                                        teststr = yytext; return 677; //L_MBRDOT
			case 172:	// ::
                                        teststr = yytext; return 678; //L_DBLCOLON
			case 173:	// -> 
                                        teststr = yytext; return 679; //L_POINTSTO
			case 174:	// ->*
                                        teststr = yytext; return 680; //L_MBRPTR
			case 175:	// ++
                                        teststr = yytext; return 681; //L_INCR
			case 176:	// --
                                        teststr = yytext; return 682; //L_DECR
			case 177:	// <<
                                        teststr = yytext; return 683; //L_LSHIFT
			case 178:	// >>
                                        teststr = yytext; return 684; //L_RSHIFT
			case 179:	// <=
                                        teststr = yytext; return 685; //L_LTEQ
			case 180:	// >=
                                        teststr = yytext; return 686; //L_GTEQ
			case 181:	// ==
                                        teststr = yytext; return 687; //L_EQUALS
			case 182:	// !=
                                        teststr = yytext; return 688; //L_NOTEQ
			case 183:	// &&
                                        teststr = yytext; return 689; //L_ANDAND
			case 184:	// ||
                                        teststr = yytext; return 690; //L_OROR
			case 185:	// *=
                                        teststr = yytext; return 691; //L_MULTEQ
			case 186:	// /=
                                        teststr = yytext; return 692; //L_DIVEQ
			case 187:	// %=
                                        teststr = yytext; return 693; //L_MODEQ
			case 188:	// +=
                                        teststr = yytext; return 694; //L_PLUSEQ
			case 189:	// -=
                                        teststr = yytext; return 695; //L_MINUSEQ
			case 190:	// <<=
                                        teststr = yytext; return 696; //L_LSHFTEQ
			case 191:	// >>=
                                        teststr = yytext; return 697; //L_RSHFTEQ
			case 192:	// &=
                                        teststr = yytext; return 698; //L_ANDEQ
			case 193:	// ^=
                                        teststr = yytext; return 699; //L_XOREQ
			case 194:	// |=
                                        teststr = yytext; return 700; //L_OREQ		//OPERATION
			case 195:	// ...
                                        teststr = yytext; return 701; //L_ELLIPSIS
			case 196:	// /*
                                        yy_start = 3;
                                        teststr = yytext; return 702; //L_BEGIN_COMMENT
			case 197:	// */
                                        yy_start = 1;
                                        teststr = yytext; return 703; //L_END_COMMENT
			case 198:	// //
                                        teststr = yytext; return 704; //L_LINE_COMMENT
									//705 ^
			case 199:	// \		???
                                        teststr = yytext; return 707;


			case YY_STATE_EOF(INITIAL): //0 201+0+1 //202
			case YY_STATE_EOF(COMMENT): //1 201+1+1 //203
					return 0;

	case YY_END_OF_BUFFER: //??? 201
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		//???

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p; //???
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE: //1
				{
				yy_did_buffer_switch_on_eof = 0;

				//if ( yywrap() )
				if (1)
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		;//YY_FATAL_ERROR("fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	//if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
	//	YY_FATAL_ERROR("fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING ) //2
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = (yy_n_chars) = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
//#ifdef YY_USES_REJECT
//			YY_FATAL_ERROR("input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
//#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			//if ( ! b->yy_ch_buf )
			//	YY_FATAL_ERROR("fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
//#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = (yy_n_chars); //+++
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ ) //?
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH; //2
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING; //2
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN; //0

	//???

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 812 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}

static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 812 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 811);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyrestart( FILE *input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}

//yy_switch_to_buffer

void yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}

YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	//if ( ! b )
	//	YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	//if ( ! b->yy_ch_buf )
	//	YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}

//yy_delete_buffer

void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = file ? 1 : 0;
	}

void yy_flush_buffer( YY_BUFFER_STATE b )
	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR; //0
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR; //0

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}

//yy_scan_buffer
//yy_scan_string
//yy_scan_bytes
//yy_push_state
//yy_pop_state
//yy_top_state
//yy_fatal_error
//yyless
//yy_flex_strncpy

static void *yy_flex_alloc( yy_size_t size )
	{
	return (void *) Syser_malloc( size );
	}

static void *yy_flex_realloc( void *ptr, yy_size_t size )
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) Syser_realloc( (char *) ptr, size );
	}

static void yy_flex_free( void *ptr )
	{
	Syser_free( ptr );
	}
